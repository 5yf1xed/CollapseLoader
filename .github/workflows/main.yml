name: Build
on:
  push:
    branches:
    - main
    paths:
      - '**.py'
      
jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.2

      - name: Install requirements
        run: |
          pip install -r requirements.txt

      - name: Run build scripts
        run: |
            .\scripts\ci_cd.ps1

      - name: Make Build
        run: |
            echo "Using version ${{ env.VERSION }} in the build script."
            python builder.py


      - name: Set artifact path/name
        run: |
          $ARTIFACT_PATH=Get-ChildItem -Path .\ -Filter "CollapseLoader*.exe"  -Recurse | Select-Object -ExpandProperty Name | Split-Path -Leaf
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          
          $ARTIFACT_HASH=git rev-parse --short HEAD
          echo "ARTIFACT_HASH=$ARTIFACT_HASH" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

          $commitHash = git rev-parse --short HEAD

          Get-ChildItem -Path .\ -Filter "CollapseLoader*.exe" | ForEach-Object {
              $ARTIFACT_PATH = "CollapseLoader_$commitHash.exe"
              echo "ARTIFACT_PATH=$ARTIFACT_PATH" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
              Rename-Item -Path $_.FullName -NewName $ARTIFACT_PATH
          }

          echo $ARTIFACT_PATH

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: CollapseLoader (${{ env.ARTIFACT_HASH }})
          path: ${{ env.ARTIFACT_PATH }}

      - name: Make release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          name: "Github actions build: ${{ env.ARTIFACT_HASH }}"
          tag: "autorelease-${{ env.ARTIFACT_HASH }}"
          prerelease: true
          artifacts: "*.exe"

      - name: Get MD5 Hash of build
        run: |
          $MD5_HASH=Get-FileHash ${{ env.ARTIFACT_PATH }} -Algorithm MD5
          echo "MD5 hash of build $($MD5_HASH.Hash) check it to make sure you downloaded a clean build without viruses!!!"
